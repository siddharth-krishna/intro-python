// This file was automatically generated by parse_problems.py.

const problemset = [
  {"id": "Print", "title": "Hello, World!", "description": "<p>A program in Python is a list of lines, and each line (or <em>statement</em>) tells the computer to do something.</p>\n\n<p>Let's start with the <code>print</code> statement. It tells the computer to print out a line. For example, this program:</p>\n\n<pre>print(\"Hello\")\n</pre>\n\n<p>when run, will print:</p>\n\n<pre>Hello\n</pre>\n\n<p><code>print</code> is a <em>function</em>, and the program above is calling the function with the <em>argument</em> <code>\"Hello\"</code>. The argument is inside double quotes <code>\"</code> because it is a line of text that can have spaces in it, called a <em>string</em>. Some other strings are <code>\"Goodbye\"</code>, <code>\"Python rocks\"</code>, and <code>\"In 2 years I will have 20,000 sheep\"</code>.</p>\n\n<p>If you call <code>print</code> with another string as argument, it will print that string instead. Here is your first problem: the box below contains a Python program that prints <code>Goodbye</code>, which you can run by clicking on the <code>Run</code> button, can you change the program to print <code>Hello, World!</code> instead? When you are done, try clicking <code>Submit</code>.</p>\n", "defaultcode": "print(\"Goodbye\")\n", "expectedans": "Hello, World!\n"},
  {"id": "Plus2", "title": "Add two to a number", "description": "<p>The code below defines a function <code>plus_two(n)</code> that is supposed to take an input number <code>n</code>, and return an output number that is <code>n</code> plus two. However, the code given below is wrong: if you call <code>plus_two(4)</code>, for example, it returns the correct answer <code>6</code>, but <code>plus_two(5)</code> should return <code>7</code> and this code returns <code>6</code>. Can you fix it?</p>\n", "defaultcode": "def plus_two(n):\n    return 6  # Change this line!\n\nprint(plus_two(4))  # Expected: 6\nprint(plus_two(5))  # Expected: 7\n", "unittests": "tests = [(n, n + 2) for n in [-25,0,10,15,100,98765]]\nfor n, ans in tests:\n    assert ans == plus_two(n), f'plus_two({n}) should be {ans} but was {plus_two(n)}'\n"},
  {"id": "Dbl", "title": "Double a number", "description": "<p>The last problem asked you to add two to the input number. Now, write a function <code>double(n)</code> that takes an input number <code>n</code>, and returns an output number that is two times <code>n</code>:</p>\n", "defaultcode": "def double(n):\n    return 8\n\nprint(double(4))  # Expected: 8\nprint(double(5))  # Expected: 10\n", "unittests": "tests = [(n, 2 * n) for n in [-25,0,10,15,100,98765]]\nfor n, ans in tests:\n    assert ans == double(n), f'double({n}) should be {ans} but was {double(n)}'\n"},
  {"id": "SumN", "title": "Sum from <code>1</code> to <code>n</code>", "description": "<p>Write a function <code>sum_to(n)</code> that adds up all the numbers from <code>1</code> up to <code>n</code>. If you call <code>sum_to(10)</code>, for example, it should return <code>55</code>.</p>\n", "defaultcode": "def sum_to(n):\n    # Your code goes here\n\nprint(sum_to(10))  # Expected: 55\n", "unittests": "tests = [(n, sum(range(n+1))) for n in [0,10,15,100,98765]]\nfor n, ans in tests:\n    assert ans == sum_to(n), f'sum_to({n}) should be {ans} but was {sum_to(n)}'\n"},
  {"id": "SumEven", "title": "Sum even numbers", "description": "<p>Write a function <code>sum_evens(n)</code> that adds up all the <i>even</i> numbers from <code>1</code> up to <code>n</code>. If you call <code>sum_evens(10)</code>, for example, it should return <code>2+4+6+8+10=30</code>.</p>\n", "defaultcode": "def sum_evens(n):\n    # Your code goes here\n\nprint(sum_evens(10))  # Expected: 30\n", "unittests": "tests = [(n, sum(range(0,n+1,2))) for n in [0,10,15,100,98765]]\nfor n, ans in tests:\n    assert ans == sum_evens(n), f'sum_evens({n}) should be {ans} but was {sum_evens(n)}'\n"},
];
